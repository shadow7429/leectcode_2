// startTime: 11: 07
// finishTime: 11: 31
// https://leetcode.com/problems/set-matrix-zeroes/

/*
这个方法比较不简洁，遍历一遍matrix是必须的，还用了多余空间，用了俩list储存要赋值为0的行和列，然后再进行赋值，
是naive的方法。
*/
public class Solution {
    public void setZeroes(int[][] matrix) {
        List<Integer> rows = new ArrayList<Integer>();
        List<Integer> columns = new ArrayList<Integer>();
        
        for (int i = 0; i < matrix.length; i++){
            for (int j = 0; j < matrix[i].length; j++){
                if (matrix[i][j] == 0){
                    if (!rows.contains(i)) rows.add(i);
                    if (!columns.contains(j)) columns.add(j);
                } 
            }
        }
        for (int i = 0; i < rows.size(); i++) helper1(rows.get(i), matrix);
        for (int j = 0; j < columns.size(); j++) helper2(columns.get(j), matrix);
        return;
    }
    public void helper1(int row, int[][]matrix){
        for (int i = 0; i < matrix[row].length; i++){
            matrix[row][i] = 0;
        }
        return;
    }
    public void helper2(int column, int[][] matrix){
        for (int i = 0; i < matrix.length; i++) matrix[i][column] = 0;
        return;
    }
}

// improved one
/*
本身这个问题的难度在于，如果边遍历边改变的话上一步因为matrix[i][j]位置为0把第j列的数字都变为0了，下面遍历的时候原本
不为0的位置经过上一步改变变为了0，下面就会将它所在的行列都赋为0，这样很容易导致最后全是0.所以思考的解法应该是尽力不改
变matrix里面的值，而是采用一种方法记录它原本0的分布情况。上面的naive方法是借助于其他的空间，下面的方法是利用matrix
本身的空间。
这个方法的思路是对于出现的每一个0，将它对应的第一行的该列的数字以及该行的第一列的数字设置为0，这样子，我们用来记录
0的方式是改变第一行对应列的数字以及改变对应行第一列的数字，所以就需要两个boolean型来表示第一列和第一行的原本数字中
存不存在0. 之后的问题就是遍历判断和改变了。
*/
public class Solution {
    public void setZeroes(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) return;
        boolean fr = false;
        boolean fc = false;
        for (int i = 0; i < matrix.length; i++){
            for (int j = 0; j < matrix[i].length; j++){
                if (matrix[i][j] == 0){
                    if (i == 0) fr = true;
                    if (j == 0) fc = true;
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
        for (int i = 1; i < matrix.length; i++){
            for (int j = 1; j < matrix[0].length; j++){
                if (matrix[i][0] == 0 || matrix[0][j] == 0) matrix[i][j] = 0;
            }
        }
        if (fr){
            for (int i = 0; i < matrix[0].length; i++) matrix[0][i] = 0;
        }
        if (fc){
            for (int i = 0; i < matrix.length; i++) matrix[i][0] = 0;
        }
        return;
    }
}

