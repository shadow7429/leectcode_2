// startTime: 10: 20
// finishTime: 10: 57 结果不符合time要求
// https://leetcode.com/problems/permutation-sequence/

/*
这种类似题之前都是用递归做的，这次想用iterative做，然后超时了TAT, 其实因为自己没有简化问题，我这个方法
其实就是iterative的实现每一个permutation了，所以浪费了很多时间，实际上人家让求第k个，我们为了简化问题
就应该考虑第k个在哪个位置，怎么样能最直接的求出它。
*/

// iterative （超时）
public class Solution {
    public String getPermutation(int n, int k) {
        if (n < 1) return "";
        
        LinkedList<Integer> l = new LinkedList<Integer>();
        for (int i = 1; i <= n; i++) l.add(i);
        
        int j = 1;
        while (j < k){
            int current = l.removeLast();
            while (l.size() > 0){
                current = l.removeLast();
                if (current < n){
                    int i = current + 1;
                    for (; i <= n; i ++){
                        if (!l.contains(i)){
                            l.add(i);
                            break;
                        }
                    }
                    if (i <= n) break;
                }
            }
            while (l.size() < n){
                for (int i = 1; i <= n; i++){
                    if (! l.contains(i)){
                        l.add(i);
                        break;
                    }
                }
            }
            j++;
        }
        String res = "";
        for (int i : l) res = res + i;
        return res;
    }
}

// Discuss上的
/*
这道题的思路就是一位一位的确定当前string中的char。方法是：
例如对于{n = 4， k = 9}的情况，确定第一位的时候可能有下面几种：
1，{n = 3}
2, {n = 3}
3, {n = 3}
4, {n = 3}
所以确定对于n = 3的情况下可能有n！种情况，所以若是k <= n!那么第一位就应该为1，以此类推，可以
确定第一位是多少，第一位确定了之后，往下走确定第二位，对于第二位来说，可供选择的数字少了一种：
2, 1, {n = 2}
   3, {n = 2}
   4, {n = 2}
所以即可用一个list存储下来可能的候选值，每次每一位选定一个之后，就将该数字从list中remove掉。
后面的情况以此类推即可确定下来每一位的值。如下：
2, 3, 1, 4       = >        2, 3, 1, 4
      4, 1
*/
public class Solution {
    public String getPermutation(int n, int k) {
        int pos = 0;
        List<Integer> numbers = new ArrayList<>();
        int[] factorial = new int[n + 1];
        StringBuilder sb = new StringBuilder();
        
        int sum = 1;
        factorial[0] = 1;
        for (int i = 1; i <= n; i++){              // 用一个数组保存下来各种n！的值
            sum = sum * i;
            factorial[i] = sum;
        }
        
        for (int i = 1; i <= n; i++){
            numbers.add(i);
        }
        k--;
        for (int i = 1; i <= n; i++){
            int index = k / factorial[n - i];
            sb.append(String.valueOf(numbers.get(index)));
            numbers.remove(index);                 // 各位的数字不能相等，所以要记得去除
            k = k - index * factorial[n - i];      // 每次确定了一位之后，接下来要来划分的k就会减少。
        }
        return sb.toString();
    }
}
