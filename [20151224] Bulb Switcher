// https://leetcode.com/problems/bulb-switcher/


/* 
想法是前n-1个都通过前面的可以确定了，所以我需要再用一个循环来确定第n个是on还是off。
时间复杂度为O(n^2)
*/

public class Solution {
    public int bulbSwitch(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++){
            int count = 0;
            for (int j = 1; j <=i; j++){
                count = count + (i % j == 0 ? 1 : 0);
            }
            dp[i] = dp[i - 1] + count % 2;
        }
        return dp[n];
    }
}

/*
A bulb ends up on iff it is switched an odd number of times.
Bulb i is switched in round d iff d divides i. So bulb i ends up on iff it has an odd number of divisors.
Divisors come in pairs, like i=12 has divisors 1 and 12, 2 and 6, and 3 and 4. 
Except if i is a square, like 36 has divisors 1 and 36, 2 and 18, 3 and 12, 4 and 9, 
and double divisor 6. So bulb i ends up on iff and only if i is a square.
So just count the square numbers.
*/

public class Solution {
    public int bulbSwitch(int n) {
        return (int)Math.sqrt(n);   
    }
}
