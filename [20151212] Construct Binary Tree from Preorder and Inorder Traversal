// startTime: 16: 18
// finishTime: 16: 37
// https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

/*
先序遍历的序列很容易确定出来根节点，然后用inorder的序列确定下左右分支的区间，然后递归调用递归
求出各个节点和她们的左右分支区间。
*/
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder.length == 0 || inorder.length == 0) return null;
        return helper(preorder, 0, inorder, 0, inorder.length - 1);
    }
    public TreeNode helper(int[] preorder, int preindex, int[] inorder, int instart, int inend){
        if (preindex >= preorder.length || instart > inend) return null;
        if (instart == inend) return new TreeNode(inorder[instart]);
        TreeNode root = new TreeNode(preorder[preindex]);
        int loc = 0;
        for (int i = instart; i <= inend; i++){
            if (root.val == inorder[i]) loc = i;
        }
        root.left = helper(preorder, preindex + 1, inorder, instart, loc - 1);
        root.right = helper(preorder, preindex + 1 + loc - instart, inorder, loc + 1, inend); //-------------------区间范围需要注意。
        return root;
    }
}
