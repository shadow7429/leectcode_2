// startTime: 23: 22
// finishTime: 23: 45
// https://leetcode.com/problems/kth-smallest-element-in-a-bst/

/*
因为已经说了是BST，BST的特点是知道的，所以左边的小，那么取第k个最小的，我们就将这些节点以
先左后中间后右边的顺序在stack中进行pop，知道pop了第k个截止，返回pop的值即可。
那么就涉及到压入栈中的顺序，我们就先将节点压入然后压左节点，当压倒末端，不存在左节点了
就将stack的顶端pop出来然后看看它是否含有右节点，若含有则压入stack中，这里跟之前遇到的问题一样
存在反复压入左节点的问题，所以还像以前一样用一个list记录下那些已经扩展过左节点的节点。
*/
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<TreeNode> old = new ArrayList<TreeNode>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        int i = 0;
        int res = 0;
        while (i < k){
            TreeNode r = stack.peek();
            if (!old.contains(r) && r.left != null){
                stack.push(r.left);
                old.add(r);
            }
            else {
                r = stack.pop();
                res = r.val;
                i++;
                if (r.right != null) stack.push(r.right);
            }
        }
        return res;
    }
}
