// startTime: 17: 30
// finishTime: 17: 55
// https://leetcode.com/problems/maximum-product-subarray/

/*
这道题的思路与求和的本质是一样的，就是记录下来之前的最值，但是这里面因为是乘积，所以原来的最小值可能乘以一个数会
变成最大值，因此我们就记录下来每个点处的最大值和最小值，而在哪几个值中选是要动脑筋的。在i位置处，我们要到它的最大值
和最小值，每一个被比较的数字里面肯定都要包含进来nums[i]的，要不就断掉了，所以应该在三个数字中选择最大和最小，分别为：
minmax[i - 1][0] * nums[i], minmax[i - 1][1] * nums[i], nums[i]。 其中minmax是一个二维数组，minmax[i][0]表示到i位置
处最小的值，minmax[i][1]表示到i位置的最大的值。nums[i] 就表示舍弃前面的subarray了，从i位置重新开始。
*/
/*
一般的dp问题是用一个数组，然后数组的最后一个值就是该题的res，但是如果想不到这样的方法，可以用数组保存我们想要保存
的信息，然后在每个位置都进行res的取得。
*/
public class Solution {
    public int maxProduct(int[] nums) {
        if (nums.length == 0) return 0;
        int[][] minmax = new int[nums.length][2];
        minmax[0][0] = nums[0];
        minmax[0][1] = nums[0];
        int res = nums[0];
        for (int i = 1; i < nums.length; i++){
            minmax[i][0] = Math.min(Math.min(nums[i], nums[i] * minmax[i - 1][0]), nums[i] * minmax[i - 1][1]);
            minmax[i][1] = Math.max(Math.max(nums[i], nums[i] * minmax[i - 1][0]), nums[i] * minmax[i - 1][1]);
            res = Math.max(Math.max(minmax[i][0], minmax[i][1]), res);
        }
        return res;
    }
}
